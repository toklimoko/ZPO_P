package com.tomek.audiometr;

import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.util.Log;
import android.view.View;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import org.achartengine.ChartFactory;
import org.achartengine.GraphicalView;
import org.achartengine.chart.PointStyle;
import org.achartengine.model.XYMultipleSeriesDataset;
import org.achartengine.model.XYSeries;
import org.achartengine.renderer.XYMultipleSeriesRenderer;
import org.achartengine.renderer.XYSeriesRenderer;

import java.util.ArrayList;
import java.util.ServiceConfigurationError;

public class Main3Activity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener, AdapterView.OnItemSelectedListener { //podwójna implementacja

    private Button btn_generuj;
    private Button btn_Play_bad;
    private Button btn_Stop_bad;
    private Button btn_rysuj;

    private Spinner spinner;

    private double frequency = 0.0;
    private double amplitude = 0.0;
    private boolean b = false;

    private Toast toast1;
    private Toast toast2;
    private Toast toast3;

    private ArrayList<Double> listaF; //lista czestotliwosci podczas 1 próby
    private ArrayList<Double> listaA; //lista amplitud podczas 1 próby
    public ArrayList<Double> listaX; //lista wartoœci X do wykresu (czêstotliwoœci dla ka¿dej z prób)
    public ArrayList<Double> listaY; //lista wartoœci Y do wykresu (amplitudy koñcowe dla ka¿dej z prób)

    private XYSeries series; //seria danych do wykresu

    private LinearLayout chartLayout;
    private GraphicalView chartView;

    public static String patientMsg;
    private String fCode;
    private int aCode;
    private boolean koniecTestu = false;

    private boolean powtorz = false;

    private TextView tv_testZakonczony;

    //deklaracja nazw itemów do spinnera
    private static final String[]paths = {"Próba 1", "Próba 2", "Próba 3", "Próba 4", "Próba 5",
            "Próba 6", "Próba 7", "Próba 8", "Próba 9", "Próba 10", "Próba 11", "Próba 12",
            "Próba 13", "Próba 14", "Próba 15", "Próba 16", "Próba 17", "Próba 18", "Próba 19",
            "Próba 20"};


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main3);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        //obsluga lewego paska
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        //deklaracja spinnera
        spinner = (Spinner)findViewById(R.id.spinner);
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(Main3Activity.this,
                android.R.layout.simple_spinner_item,paths);

        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner.setAdapter(adapter);
        spinner.setOnItemSelectedListener(this);

        //tworzê nowe listy x i y do wykresów
        listaX = new ArrayList<>();
        listaY = new ArrayList<>();



        btn_generuj.setVisibility(View.VISIBLE);
        btn_Play_bad.setVisibility(View.INVISIBLE);
        btn_Stop_bad.setVisibility(View.INVISIBLE);
        btn_rysuj.setVisibility(View.INVISIBLE);

        Context context = getApplicationContext();
        CharSequence text = "Za³adowano dane. Mo¿na zacz¹æ badanie.";
        CharSequence text2 = "Generowanie dŸwiêku";
        CharSequence text3 = "Zapisano pomiar. Wybierz nowy dŸwiêk.";
        int duration = Toast.LENGTH_SHORT;

        toast1 = Toast.makeText(context, text, duration);
        toast2 = Toast.makeText(context,text2, duration);
        toast3 = Toast.makeText(context,text3, duration);


        if (series != null)
        series.clearSeriesValues();



        buttonGeneruj();
        buttonStop();
        buttonStart();
        buttonRysuj();


        tv_testZakonczony = (TextView) findViewById(R.id.tv_testOK);
        tv_testZakonczony.setVisibility(View.INVISIBLE);


    }

    public void buttonGeneruj(){
        btn_generuj= (Button) findViewById(R.id.btn_generuj);
        btn_generuj.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {



                //KOMUNIKACJA - OCZEKIWANIE NA GOTOWOSC PACJENTA, WYSLANIE GOTOWOSCI LEKARZA

                captureOutgoingMsg("11111111"); //"lekarz gotowy"
                //wys³anie reakcji lekarza


                captureIncomingMsg();
                while (patientMsg != "01111111") { // gdy nie "pacjent gotowy"

                    //oczekiwanie na reakcjê pacjenta
                    captureIncomingMsg();
                }


                if (series != null)
                series.clearSeriesValues();


                listaF = new ArrayList<>();
                listaA = new ArrayList<>();

                //dodaj element 0 do list

                  amplitude = 0;
                  fCode = "00001";
                  aCode = 0b000;

                   // Play play = new Play(frequency, amplitude, 1);

                listaF.add(frequency);
                listaA.add(amplitude);

                btn_generuj.setVisibility(View.INVISIBLE);
                btn_Play_bad.setVisibility(View.VISIBLE);
                btn_Stop_bad.setVisibility(View.VISIBLE);
             btn_rysuj.setVisibility(View.INVISIBLE);
//
//                    toast1.show();
            }
        });
    }



    public void buttonStart(){
        btn_Play_bad = (Button) findViewById(R.id.btn_glosniej);
        btn_Play_bad.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                btn_generuj.setVisibility(View.INVISIBLE);
                btn_Play_bad.setVisibility(View.VISIBLE);
                btn_Stop_bad.setVisibility(View.VISIBLE);
                btn_rysuj.setVisibility(View.INVISIBLE);
                tv_testZakonczony.setVisibility(View.INVISIBLE);


                //  aCode = aCode - 1;

                reply(); //wys³anie rz¹dania wygenerowania dŸwiêku o danej czestotliwoœci i amplitudzie (np. "1000_2.5")


                while(koniecTestu==false) {

                    captureIncomingMsg(); //sprawdz

                    if (patientMsg == "11111001") {  //"lekarzu, wez glosniej!" - gdy pacjent nie wcisnie przycisku slysze po odtworzeniu dzwieku
                        reply();
                    } else if (patientMsg == "11111101") { // "lekarzu, ja slysze!"

                        tv_testZakonczony.setVisibility(View.VISIBLE);
                        koniecTestu=true;

                    }
                }



            }
        });
    }

private void reply(){

    aCode = aCode + 1;
    // aCode = Integer.toBinaryString(aCode);

    //   int aCodeTemp = Integer.parseInt(aCode);
    //  Integer.toBinaryString(aCode);

    captureOutgoingMsg("11110111"); //przygotuj sie do odbioru danych odtwarzania

    //oczekiwanie na reakcjê aparatu pacjenta
    captureIncomingMsg();

    while (patientMsg != "11101111"){ //dopoki nie"przyjalem"
        captureIncomingMsg();
    }

    captureOutgoingMsg(String.valueOf(fCode) + String.valueOf(aCode));


    freqConv(fCode);
    ampConv(aCode);


    listaF.add(frequency);
    listaA.add(amplitude);


//    amplitude += 0.05;
//    Play play = new Play(frequency, amplitude, 1);




//    char[] digits = "01234567".toCharArray();
//    int digit = Character.getNumericValue(digits[digits.length-3]);
//    System.out.println(digits[digits.length-3]); // prints 1

    /// INTERPRETACJA WIADOMOSCI PRZEZ PACJENTA

//    String freq = "";
//    String amp = "";
//
//    String komenda = "11011";
//
//    while (komenda.length()<8){
//        komenda = "0" + komenda;
//    }
//
//    char[] digits = komenda.toCharArray();
//
//    for (int i = 0; i<5; i++){
//        freq = freq+String.valueOf(digits[i]);
//
//    }
//    for (int i = 5; i<8; i++){
//        amp = amp+String.valueOf(digits[i]);
//
//    }
//
//    freqConv(freq);
//    ampConv(amp);
//
//    System.out.println(frequency);
//    System.out.println(amplitude);
//
//}

    }

public void freqConv(String fCode){

    if (fCode == "00001"){
        frequency = 1000;
    }else if(fCode == "00010"){
        frequency = 8000;
    }else if(fCode == "00011"){
        frequency = 150;
    }else if(fCode == "00100"){
        frequency = 12000;
    }else if(fCode == "00101"){
        frequency = 3000;
    }else if(fCode == "00110"){
        frequency = 1500;
    }else if(fCode == "00111"){
        frequency = 100;
    }else if(fCode == "01000"){
        frequency = 4000;
    }else if(fCode == "01001"){
        frequency = 15000;
    }else if(fCode == "01010"){
        frequency = 2500;
    }else if(fCode == "01011"){
        frequency = 500;
    }else if(fCode == "01100"){
        frequency = 6000;
    }else if(fCode == "01101"){
        frequency = 17000;
    }else if(fCode == "01110"){
        frequency = 250;
    }else if(fCode == "01111"){
        frequency = 14000;
    }else if(fCode == "10000"){
        frequency = 125;
    }else if(fCode == "10001"){
        frequency = 16000;
    }else if(fCode == "10010"){
        frequency = 400;
    }else if(fCode == "10011"){
        frequency = 700;
    }else if(fCode == "10100") {
        frequency = 10000;
    }

    }

    public void ampConv(int aCode){

        if (aCode == 0b000){
            amplitude = 0.10;
        }else if(aCode == 0b001){
            amplitude = 0.20;
        }else if(aCode == 0b010){
            amplitude = 0.30;
        }else if(aCode == 0b011){
            amplitude = 0.40;
        }else if(aCode == 0b100){
            amplitude = 0.50;
        }else if(aCode == 0b101){
            amplitude = 0.60;
        }else if(aCode == 0b110){
            amplitude = 0.70;
        }else if(aCode == 0b111){
            amplitude = 0.80;
        }
    }


    public void buttonStop(){
        btn_Stop_bad = (Button) findViewById(R.id.btn_slysze);
        btn_Stop_bad.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                b = false;

                koniecTestu = true;

                //pobierz te wartoœci czêstotliwoœci i amplitudy, przy których u¿ytkownik wcisn¹³ "s³yszê"
                frequency = listaF.get(listaF.size() - 1);
                amplitude = listaA.get(listaA.size() - 1);

                //dodaj nowe wartoœci do list wykorzystywanych do tworzenia wykresów
                listaX.add(frequency);
                listaY.add(amplitude);

                btn_generuj.setVisibility(View.VISIBLE);
                btn_Play_bad.setVisibility(View.INVISIBLE);
                btn_Stop_bad.setVisibility(View.INVISIBLE);
                btn_rysuj.setVisibility(View.VISIBLE);

                toast3.show();
            }
        });
    }


    public void buttonRysuj(){
        btn_rysuj= (Button) findViewById(R.id.btn_doWykresu);
        btn_rysuj.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                rysuj();
          }
        });
    }

    public void rysuj(){

        series = new XYSeries("Audiogram");

        //dodaj ka¿dy punkt pomiarowy do serii danych do wykresu
        for (int i = 0; i<listaX.size();i++){
            series.add(listaX.get(i),listaY.get(i));

        }

        XYSeriesRenderer renderer = new XYSeriesRenderer();
        renderer.setLineWidth(3);
        renderer.setColor(Color.BLUE);
        renderer.setPointStyle(PointStyle.CIRCLE);

        XYMultipleSeriesRenderer mrenderer = new XYMultipleSeriesRenderer();
        mrenderer.addSeriesRenderer(renderer);
        mrenderer.setYAxisMin(1.5);
        mrenderer.setYAxisMax(0);
        mrenderer.setXAxisMin(0);
        mrenderer.setXAxisMax(18000);
        mrenderer.setMarginsColor(Color.WHITE);
        mrenderer.setShowGrid(true);
        mrenderer.setMarginsColor(Color.WHITE);
        mrenderer.setGridColor(Color.LTGRAY);
        mrenderer.setAxesColor(Color.BLACK);
        mrenderer.setXLabelsColor(Color.BLACK);
        mrenderer.setYLabelsColor(0, Color.BLACK);
        mrenderer.setYLabelsAlign(Paint.Align.CENTER);
        mrenderer.setLabelsTextSize(30);
        mrenderer.setLegendTextSize(30);
        mrenderer.setFitLegend(true);
        mrenderer.setShowLegend(false);

        XYMultipleSeriesDataset dataset = new XYMultipleSeriesDataset();
        dataset.addSeries(series);

        chartLayout = (LinearLayout) findViewById(R.id.llv);
        chartView = ChartFactory.getLineChartView(this,dataset,mrenderer);
        chartLayout.addView(chartView);
        chartView.repaint();


    }



    public static void captureIncomingMsg() {

        //to jest do przyjmowania wiadomosci

        patientMsg = BluetoothConectionService.getWiadomoscPrzychodzaca();

    }

    //do wysy³aniawiadomosci:
    public static void captureOutgoingMsg(String outgoingMsg){

        BluetoothConectionService.captureOutgoingMsg(outgoingMsg);
    }


    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main3, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings4) {

            //"jak wykonaæ badanie?"
            Intent intentInfo = new Intent(Main3Activity.this,PopUp.class);
            startActivity(intentInfo);

            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();


        //gdy wybrano start - otworz aktywnosc 1
        if (id == R.id.nav_start) {

            Intent intentLauncher = new Intent(Main3Activity.this,MainActivity.class);
            startActivity(intentLauncher);

            //gdy wybrano kalibruj - otworz aktywnosc 2
        } else if (id == R.id.nav_kalibruj) {

            Intent intentKal = new Intent(Main3Activity.this, Main2Activity.class);
            startActivity(intentKal);


            // gdy wybrano bluetooth wybierz aktywnosc 4
        }else if (id == R.id.nav_bt) {

            Intent intentBt = new Intent(Main3Activity.this, Main4Activity.class);
            startActivity(intentBt);


            //gdy wybrano jak badac - otworz okno popup
        } else if (id == R.id.nav_info) {

            Intent intentInfo = new Intent(Main3Activity.this, PopUp0.class);
            startActivity(intentInfo);

            //gdy wybrano zamknij - zamknij bie¿¹c¹ aktywnosc
        } else if (id == R.id.nav_powrot) {
            finish();
            //System.exit(0); //drugi sposób zamkniêcia aktywnoœci
        }


        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    @Override
    public void onItemSelected(AdapterView<?> parent, View v, int position, long id) {

        //za³aduj czêstotliwoœci - deklaracja wartoœci itemów do spinnera

        switch (position) {
            case 0:
                frequency = 1000;
                fCode = "00001";
                break;
            case 1:
                frequency = 8000;
                fCode = "00010";
                break;
            case 2:
                frequency = 150;
                fCode = "00011";
                break;
            case 3:
                frequency = 12000;
                fCode = "00100";
                break;
            case 4:
                frequency = 3000;
                fCode = "00101";
                break;
            case 5:
                frequency = 1500;
                fCode = "00110";
                break;
            case 6:
                frequency = 100;
                fCode = "00111";
                break;
            case 7:
                frequency = 4000;
                fCode = "01000";
                break;
            case 8:
                frequency = 15000;
                fCode = "01001";
                break;
            case 9:
                frequency = 2500;
                fCode = "01010";
                break;
            case 10:
                frequency = 500;
                fCode = "01011";
                break;
            case 11:
                frequency = 6000;
                fCode = "01100";
                break;
            case 12:
                frequency = 17000;
                fCode = "01101";
                break;
            case 13:
                frequency = 250;
                fCode = "01110";
                break;
            case 14:
                frequency = 14000;
                fCode = "01111";
                break;
            case 15:
                frequency = 125;
                fCode = "10000";
                break;
            case 16:
                frequency = 16000;
                fCode = "10001";
                break;
            case 17:
                frequency = 400;
                fCode = "10010";
                break;
            case 18:
                frequency = 700;
                fCode = "10011";
                break;
            case 19:
                frequency = 10000;
                fCode = "10100";
                break;
        }
    }

    @Override
    public void onNothingSelected(AdapterView<?> adapterView) {

    }
}
